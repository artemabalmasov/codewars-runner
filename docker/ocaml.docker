# BUILD-USING:    docker build -t codewars/runner-ocaml .
# TEST-USING:     docker run --rm -i -t --name=test-runner-ocaml --entrypoint=/bin/bash codewars/runner-ocaml -s
# RUN-USING:      docker run --rm --name=runner-ocaml codewars/runner-ocaml --help

# Pull base image.
FROM codewars/base-runner

# Install OCAML
RUN apt-get install -y software-properties-common
RUN add-apt-repository -y ppa:avsm/ppa
RUN apt-get -y update
RUN apt-get -y install camlp4 ocaml opam

# add the package json first to a tmp directory and build, copy over so that we dont rebuild every time
ADD package.json /tmp/package.json
RUN cd /tmp && npm install --production
RUN mkdir -p /runner && cp -a /tmp/node_modules /runner

# ADD cli-runner
ADD . /runner
WORKDIR /runner
RUN ln -s /home/codewarrior /workspace

USER codewarrior
ENV USER codewarrior
ENV HOME /home/codewarrior

# Install opam stuff as the target user (so that they have utop, etc)
# Note that because aspucd is max of 1.8 (a broken version) on Ubuntu Trusty, we have to use the internal solver
RUN opam init --use-internal-solver  -y
RUN eval `opam config env`
RUN echo ". $HOME/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true" >> ~/.profile
RUN echo ". $HOME/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true" >> ~/.bashrc
RUN opam update --use-internal-solver -y
RUN opam install --use-internal-solver -y ocamlbuild ounit core batteries lwt utop

# Set environment variables
RUN echo '#!/bin/bash' > /home/codewarrior/run_ocaml.sh
RUN echo 'eval `opam config env` && $@' >> /home/codewarrior/run_ocaml.sh
RUN chmod +x /home/codewarrior/run_ocaml.sh

# Run the test suite to make sure this thing works
RUN /home/codewarrior/run_ocaml.sh mocha -t 5000 test/runners/ocaml_spec.js

#timeout is a fallback in case an error with node
#prevents it from exiting properly
ENTRYPOINT ["/home/codewarrior/run_ocaml.sh", "timeout", "15", "node"]
