# Codewars preset configuration for building Swift, XCTest, and all libraries from source.
# The only difference between the codewars_linux_1404 preset and the buildbot_linux_1404
# preset is that we are skipping some tests to speed up the build time.
# The 'buildbot_linux_1404' preset was copied directly from:
#
#   https://github.com/apple/swift/blob/master/utils/build-presets.ini
#
# The only change between the buildbox_linux_1404 preset defined in the above
# file and the buildbot_linux_1404 preset defined in this file is that we
# comment out the 'test-installable-package' directive which allows us to
# modify the the following file without breaking the tests and the build:
#
#  https://github.com/apple/swift-corelibs-xctest/blob/master/Sources/XCTest/Private/PrintObserver.swift
#
# Unfortunately it is not possible to add ad-hoc customizations to a preset,
# so we have to create this file along with our own preset definition.
# More information on presets can be found in the docstring of the 'main_normal'
# function defined the the following file:
#
#   https://github.com/apple/swift/blob/master/utils/build-script
#
# It was decided to build swift from source rather than use one of the
# pre-compiled Swift development snapshots because building from source allows
# us to modify the standard output of the XCTest PrintObserver.swift file
# to meet the Codewars test output spec (<DESCRIBE::>, <IT::>, etc.).
# Building from source also gives us more control over which libraries
# we want packaged into our Swift binary. For example, we may choose not
# to include Grand Central Dispatch or the Swift Package Manager that ships
# by default with Swift for the purpose of running Swift test nodes on Codewars.
# We can modify the Swift source code as well.
#
# Other relevant files:
#
#   https://github.com/apple/swift/blob/master/utils/build-presets.ini
#   https://github.com/apple/swift/blob/master/utils/build-script
#   https://github.com/apple/swift/blob/master/utils/build-script-impl
#
# If you intend to modify the PrintObverser.swift file or this build-presents.ini
# file to build Swift from source or change this build, it is recommended that
# you first pass the '--dry-run' flag to the 'build-script' call in swift.docker.
# This will catch any errors in your preset configuration early so you have to
# wait until the end of the build before you see you've made a mistake.
[preset: codewars_linux_1404]
mixin-preset=buildbot_linux_1404

skip-test-cmark
skip-test-llbuild
skip-test-swiftpm
skip-test-foundation
skip-test-lldb
skip-test-swift
skip-test-xctest
skip-test-libdispatch

# Don't run tests so we can hack xctest lib without failed tests stopping the build.
swift-include-tests=0

# Ubuntu 14.04 preset for backwards compat and future customizations.
[preset: buildbot_linux_1404]
mixin-preset=buildbot_linux

[preset: buildbot_linux]
mixin-preset=mixin_linux_installation
build-subdir=buildbot_linux
lldb
release
test
validation-test
long-test
foundation
libdispatch
lit-args=-v

dash-dash

install-foundation
install-libdispatch
reconfigure

mixin-preset=mixin_lightweight_assertions

llbuild
swiftpm
xctest
dash-dash

install-swift
install-lldb
install-llbuild
install-swiftpm
install-xctest
install-prefix=/usr
swift-install-components=autolink-driver;compiler;clang-builtin-headers;stdlib;swift-remote-mirror;sdk-overlay;license
build-swift-static-stdlib
build-swift-static-sdk-overlay
build-swift-stdlib-unittest-extra

# Executes the lit tests for the installable package that is created
# Assumes the swift-integration-tests repo is checked out
# CODEWARS RELEVANT: Comment out this check to we can hack xctests without tests failing.
# test-installable-package

# Path to the root of the installation filesystem.
install-destdir=%(install_destdir)s

# Path to the .tar.gz package we would create.
installable-package=%(installable_package)s

# A mixin that enables 'lightweight' assertions that don't slow down the
# compiler significantly.
[preset: mixin_lightweight_assertions]
assertions
no-swift-stdlib-assertions

# FIXME: This should be:
# no-assertions
# swift-assertions
# ... but our tests are expecting assertions to be either on or off everywhere.

dash-dash

# AST verifier slows down the compiler significantly.
swift-enable-ast-verifier=0
